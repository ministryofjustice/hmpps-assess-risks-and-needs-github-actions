name: Get Cypress test timings to cache

on:
  workflow_call:
    inputs:
      spec-file-patterns:
        description: 'List of glob patterns, separated by a single space. For example: e2e/**/*.cy.ts e2e/**/*.cy.js'
        type: string
        required: true
      timings-cache-key:
        type: string
        required: false
        default: cypress-timings
        description: 'Cache key to retrieve timings from'
      repository:
        description: 'Repository to pull spec files from'
        type: string
        required: false
        default: ${{ github.repository }}
    outputs:
      timings:
        description: 'Contents of timings.json'
        value: ${{ jobs.get-timings.outputs.timings }}

jobs:
  get-timings:
    runs-on: ubuntu-latest
    outputs:
      timings: ${{ steps.get-timings.outputs.timings }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
      - name: Restore timing cache
        uses: actions/cache/restore@v4
        with:
          path: timings-cache.json
          key: ${{ inputs.timings-cache-key }}
      - name: Get cached timings
        id: get-cached-timings
        run: |
          if ls timings-cache.json; \
          then cat timings-cache.json && echo "timings=$(jq -c . < timings-cache.json)" >> $GITHUB_OUTPUT; \
          else echo "timings=" >> $GITHUB_OUTPUT; \
          fi
      - name: Find spec files
        if: ${{ steps.get-cached-timings.outputs.timings != '' }}
        run: |
          shopt -s globstar
          find ${{ inputs.spec-file-patterns }} -type f \
            | while read -r spec; do \
              hash=$(md5sum "$spec" | cut -d " " -f1); \
              echo "{\"spec\": \"$spec\", \"hash\": \"$hash\"}"; \
            done \
            | jq -s '.' > spec-hashes.json
          cat spec-hashes.json
      - name: Create timings.json
        if: ${{ steps.get-cached-timings.outputs.timings != '' }}
        run: |
          cat timings-cache.json \
          | jq --argjson specs "$(jq '[.[] | {spec, hash}]' spec-hashes.json)" \
            '.durations | map(select([.spec, .hash] as $entry | $specs | any(.spec == $entry[0] and .hash == $entry[1])) | {spec, duration})' \
          | jq '{durations: .}' > timings.json
      - name: Get timings.json
        id: get-timings
        run: |
          if ls timings.json; \
          then \
            cat timings.json \
            && jq -e '.durations | length == 0' timings.json \
            && echo "timings=" >> $GITHUB_OUTPUT \
            || echo "timings=$(jq -c . < timings.json)" >> $GITHUB_OUTPUT; \
          else echo "timings=" >> $GITHUB_OUTPUT; \
          fi
